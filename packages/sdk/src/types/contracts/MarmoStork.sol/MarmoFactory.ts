/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface MarmoFactoryInterface extends utils.Interface {
  functions: {
    "bytecode()": FunctionFragment;
    "createWallet(address)": FunctionFragment;
    "hash()": FunctionFragment;
    "marmo()": FunctionFragment;
    "marmoOf(address)": FunctionFragment;
    "reveal(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bytecode"
      | "createWallet"
      | "hash"
      | "marmo"
      | "marmoOf"
      | "reveal"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bytecode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createWallet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "hash", values?: undefined): string;
  encodeFunctionData(functionFragment: "marmo", values?: undefined): string;
  encodeFunctionData(functionFragment: "marmoOf", values: [string]): string;
  encodeFunctionData(functionFragment: "reveal", values: [string]): string;

  decodeFunctionResult(functionFragment: "bytecode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marmo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marmoOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;

  events: {};
}

export interface MarmoFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarmoFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bytecode(overrides?: CallOverrides): Promise<[string]>;

    createWallet(
      _source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hash(overrides?: CallOverrides): Promise<[string]>;

    marmo(overrides?: CallOverrides): Promise<[string]>;

    marmoOf(_signer: string, overrides?: CallOverrides): Promise<[string]>;

    reveal(
      _signer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bytecode(overrides?: CallOverrides): Promise<string>;

  createWallet(
    _source: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hash(overrides?: CallOverrides): Promise<string>;

  marmo(overrides?: CallOverrides): Promise<string>;

  marmoOf(_signer: string, overrides?: CallOverrides): Promise<string>;

  reveal(
    _signer: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bytecode(overrides?: CallOverrides): Promise<string>;

    createWallet(_source: string, overrides?: CallOverrides): Promise<void>;

    hash(overrides?: CallOverrides): Promise<string>;

    marmo(overrides?: CallOverrides): Promise<string>;

    marmoOf(_signer: string, overrides?: CallOverrides): Promise<string>;

    reveal(_signer: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bytecode(overrides?: CallOverrides): Promise<BigNumber>;

    createWallet(
      _source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hash(overrides?: CallOverrides): Promise<BigNumber>;

    marmo(overrides?: CallOverrides): Promise<BigNumber>;

    marmoOf(_signer: string, overrides?: CallOverrides): Promise<BigNumber>;

    reveal(
      _signer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bytecode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createWallet(
      _source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marmo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marmoOf(
      _signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reveal(
      _signer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
