/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestOutOfGas,
  TestOutOfGasInterface,
} from "../../../../contracts/test/TestContract.sol/TestOutOfGas";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d78061001f6000396000f3fe60806040526000600190505b6001156021578080601a90602e565b915050600b565b50005b6000819050919050565b60006037826024565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141560675760666072565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212201b44afdc608b7acb2a378c79b257e8de57e10eba16402a8e0752555bcf5a555164736f6c63430008060033";

type TestOutOfGasConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestOutOfGasConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestOutOfGas__factory extends ContractFactory {
  constructor(...args: TestOutOfGasConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestOutOfGas> {
    return super.deploy(overrides || {}) as Promise<TestOutOfGas>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestOutOfGas {
    return super.attach(address) as TestOutOfGas;
  }
  override connect(signer: Signer): TestOutOfGas__factory {
    return super.connect(signer) as TestOutOfGas__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestOutOfGasInterface {
    return new utils.Interface(_abi) as TestOutOfGasInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestOutOfGas {
    return new Contract(address, _abi, signerOrProvider) as TestOutOfGas;
  }
}
