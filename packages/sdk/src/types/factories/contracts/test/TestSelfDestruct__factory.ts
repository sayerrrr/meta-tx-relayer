/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestSelfDestruct,
  TestSelfDestructInterface,
} from "../../../contracts/test/TestSelfDestruct";

const _abi = [
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50605c80601d6000396000f3fe6080604052366021573373ffffffffffffffffffffffffffffffffffffffff16ff5b600080fdfea2646970667358221220d7a0cdca5432ab000da3864ae81140ff22f066fbe2bdc111179fca9a911bc5e064736f6c63430008060033";

type TestSelfDestructConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestSelfDestructConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestSelfDestruct__factory extends ContractFactory {
  constructor(...args: TestSelfDestructConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestSelfDestruct> {
    return super.deploy(overrides || {}) as Promise<TestSelfDestruct>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestSelfDestruct {
    return super.attach(address) as TestSelfDestruct;
  }
  override connect(signer: Signer): TestSelfDestruct__factory {
    return super.connect(signer) as TestSelfDestruct__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestSelfDestructInterface {
    return new utils.Interface(_abi) as TestSelfDestructInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestSelfDestruct {
    return new Contract(address, _abi, signerOrProvider) as TestSelfDestruct;
  }
}
