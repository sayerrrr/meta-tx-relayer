/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestTransfer,
  TestTransferInterface,
} from "../../../contracts/test/TestTransfer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061014f806100206000396000f3fe60806040526004361061001e5760003560e01c80631a69523014610023575b600080fd5b61003d6004803603810190610038919061009e565b61003f565b005b8073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610085573d6000803e3d6000fd5b5050565b60008135905061009881610102565b92915050565b6000602082840312156100b4576100b36100fd565b5b60006100c284828501610089565b91505092915050565b60006100d6826100dd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b61010b816100cb565b811461011657600080fd5b5056fea264697066735822122098d43fffff9dc1bfed22bb1c1665a7940a557faace08a327320365760250c32c64736f6c63430008060033";

type TestTransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestTransfer__factory extends ContractFactory {
  constructor(...args: TestTransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestTransfer> {
    return super.deploy(overrides || {}) as Promise<TestTransfer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestTransfer {
    return super.attach(address) as TestTransfer;
  }
  override connect(signer: Signer): TestTransfer__factory {
    return super.connect(signer) as TestTransfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTransferInterface {
    return new utils.Interface(_abi) as TestTransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestTransfer {
    return new Contract(address, _abi, signerOrProvider) as TestTransfer;
  }
}
